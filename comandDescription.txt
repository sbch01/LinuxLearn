neofetch
Общ синтаксис на командите:
command -options arguments
===============================================================
0 ДОПЪЛНИТЕЛНИ КОМАНДИ ОТКРИТИ В НЕТА
===============================================================

===============================================================
1 KОМАНДИ ЗА ПРЕГЛЕД НА СЪДЪРЖАНИЕ НА ДИСКОВОТО ПРОСТРАНСТВО
===============================================================
pwd - Изписва пътя на текущата директория
---------------------------------------------------------------
ls - Изписва съдържанието на директорията
	-l --all -изписва съдържанието със скрити файлове в лист
---------------------------------------------------------------
date - изписва текущата дата
---------------------------------------------------------------
cal - извписва месеца с маркиран текущия ден
---------------------------------------------------------------
less - отваря съдържанието на текстови файл.
---------------------------------------------------------------
history - изписва историята на въвежданите команди
---------------------------------------------------------------
calendar - изписва световни събития в текущия и следващия ден :)

===============================================================
2 СЪЗДАВАНЕ И УПРАВЛЕНИЕ НА ФАЙЛОВЕ И ДИРЕКТОРИИ
===============================================================
touch - създава нов файл
---------------------------------------------------------------
cd - сменя директорията
	cd dir1/dir2/dir3 - сменя текущата директория на dir3
	cd .. - връша една директория назад 
	cd / -изпраща те в основната директория
	cd ~/ - сменя директорията с home
	cd - - връща те в предходния 
	
---------------------------------------------------------------
mkdir - създава директория
---------------------------------------------------------------
rmdir - изтрива директория
---------------------------------------------------------------
cp - копира файл
---------------------------------------------------------------
mv - премества файл
---------------------------------------------------------------
rm - премахва, изтрива файл
	-r -изтрива директория и всичко под нея
---------------------------------------------------------------
ln -създава линк
	-s създадения линк наподобява кратък път 
---------------------------------------------------------------

===============================================================
3 УПРАВЛЕНИЕ И ИНФОРМАЦИЯ ЗА КОМАНДИТЕ
===============================================================

compgen - изважда лист от команди който системата поддържа.

compgen -c will list all the commands you could run.
compgen -a will list all the aliases you could run.
compgen -b will list all the built-ins you could run.
compgen -k will list all the keywords you could run.
compgen -A function will list all the functions you could run.
compgen -A function -abck will list all the above in one go.
---------------------------------------------------------------
type - тип на командата 
---------------------------------------------------------------
which - изписва файла и пътя до него, който изпълнява командата
---------------------------------------------------------------
help - извежда информация за командата
---------------------------------------------------------------
man - отваря с less документация за командата manual ;)
---------------------------------------------------------------
info - като man само че отваря връзки към други команди
	info coreutils - зарежда първата страница от връзки
---------------------------------------------------------------
alias - създва собствена команда
	1. Убеждаваме се че името не е заето чрез type name
	2. alias list='ls -l --all' - командата е създадена
	3. unalias name - изтрива команда с име name
	4. само alias без аргумент изписва всички създадени команди
---------------------------------------------------------------

===============================================================
4 ПРЕНАСОЧВАНЕ НА ИЗХОДА ВЪВ ФАЙЛ
===============================================================

ls > output.txt - записва резултата от командата във файл output.txt
ls >> output.txt - добавя резултата oт командата във файл //
ls &> output.txt - записва резултата от командата + съобщения за грешка 
ls &>> output.txt - добавя резултата от командата + съобщения за грешка
---------------------------------------------------------------
cat output.txt - зарежда  стандартния изход от файл output.txt
cat > output.txt -	записва стандартния изход в файл output.txt
			чрез клавишна комбинация Ctrl+d се оказва EOF
---------------------------------------------------------------
sort - сортира записите във файл по азбучен ред
	повече инфо -> man sort
---------------------------------------------------------------
uniq - премахва повтарящи се редове
	ако се използва uniq -d показва повтарящи се редове
---------------------------------------------------------------
grep - показва редовете в които се съдържа този текст
	подходяща употреба ls | grep txt
	ще покаже файлове, които съдържат txt в името си 
---------------------------------------------------------------		
wc - преброява редовете, думите и бахтовете във файл
	подходяща за преброяване на линиите в лист
	ls | wc -l ще покаже колко файла има в текушата дирек.
---------------------------------------------------------------
head - отпечатва първите редов на файл
	head -n 5 -отпечатва първите пет реда 
---------------------------------------------------------------
tail - отпечатва последните редове от файл
	tail -n 3 -отпечатва последните три реда
---------------------------------------------------------------
tee - вмъква междиния резултат от пайпинга във файл
 	ls -l -all | grep txt| tee out.txt | sort
---------------------------------------------------------------

===============================================================
5 ПОДРОБНО ОПИСАНИЕ НА КОМАНДА echo и bash особеностите глава 7 стр. 91 !!!
===============================================================

echo -e "Text \n" - изписва Тext и прехвърля на нов ред 
echo "Text \n" - изписва Text \n
echo ~ - изписва адреса на началната (home) директория
echo * - изписва съдържанието на текущата директория
echo *.txt - само с разширение txt
echo S* - изписва всички файлове и деиректории в текущата започващи със S
---------------------------------------------------------------
Математически операции (Само с цели числа)

	echo $((4+2)) - връща 6
---------------------------------------------------------------
примери с къдрави скоби {}

echo File_{0..10} - изписва File_0 File_1 .. и т.н.

---------------------------------------------------------------
man bash - много важен мануал  описва доста от разказаното в 
тази глава
---------------------------------------------------------------
printenv - иписва всички променливи
---------------------------------------------------------------
echo $USER - изписва стойността на променливата USER
---------------------------------------------------------------
echo $(ls) - изписва резултата от командата 
---------------------------------------------------------------

МНОГО ВАЖНА РАЗЛИКА МЕЖДУ РАЗЛИЧНИТЕ КАВИЧКИ

echo text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER
изход -> text /home/me/ls-output.txt a b foo 4 me

echo "text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER"
изход -> text ~/*.txt {a,b} foo 4 me

echo 'text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER'
изход -> text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER

===============================================================
6 КОМБИНАЦИЯ ОТ КЛАВИШИ ЗА МАНИШУЛИРАНЕ НА ТЕКСТА И КУРСОРА
===============================================================

Ctrl-a - изпраща курсора в началото на текста
Ctrl-e - ипраща курсора в края на текста
Alt-f - премества курсора една дума напред
Alt-b - премества курсора една дума назад
Ctrl-l - изчиства екрана като скролира написаното до момента нагоре
---------------------------------------------------------------
Alt-l - конвертира буквите от мястото на курсора до края с малки
Alt-u - конвертира буквите от мястото на курсора до края с големи
---------------------------------------------------------------
Ctrl-k - изтрива текста от мястото на курсора до края на текста
Ctrl-u - изтрива текста от мястото на курсора до началото на текста
Alt-d - изтрива текста от мястото на курсора до края на текущата дума
Alt-Backspace - изтрива текста от мястото на курсора до началото на текущата дума
Ctrl-y - възстановява текста след изтриване !!!

===============================================================
7 АВТО ПОПЪЛВАНЕ НА ТЕКСТА
===============================================================

Първите букви + Tab - допълва файла/директорията издава звук ако не намира съвпадения
Alt+? - изписва всички възможностти.

===============================================================
8 ИСТОРИЯ НА КОМАНДИТЕ
===============================================================

history - изписва списък с историята на командите, който сме въвеждали
history | grep /usr/bin - изписва всички команди, които съдържат /usr/bin
!88 - изпълнява 88 -та команда от историята
Ctrl+r - търси по текст използвани комади

===============================================================
9 РАЗРЕШЕНИЕ, НИВА НА ДОСТЪП, ПОТРЕБИТЕЛИ И ГРУПИ
===============================================================
Значение на файловите обозначения 
	r - може да се чете
	w - може да се пише
	x - може да се изпълни ако е скрипт или програма
	
	- - с черта се обозначава нормален файл
	d - обозначава се директория
	l - връзка към друг файл или директория
	
	тип	собственик	група 	свят
	-	rwx		rwx	rwx
---------------------------------------------------------------
chmod - смяна на разрешемията за четене запис и изпълнение

	chmod 666 file.txt -> -rw- rw- rw-
		0 000 ---
		1 001 --x
		2 010 -w-
		3 011 -wx
		4 100 r--
		5 101 r-x
		6 110 rw-
		7 111 rwx
друг вариант е да се ползва следния синтаксис

chmod u+r file.txt -> добавя право на собственика да чете файла

u - user собственик
g - group група
o - other останал свят
a - all всички
---------------------------------------------------------------
su - превключва между отделните потребители
	su -l bancho -> логва се в bancho
	с exit се излиза
	
	su -l -> логва се в рут ако знаеш паролата за роот
---------------------------------------------------------------
sudo - извършва команди, за който има права само супер потребител
---------------------------------------------------------------
sudo adduser - добавя нов потребител
---------------------------------------------------------------
sudo userdel - изтрива потребител
---------------------------------------------------------------
sudo addgroup - добавя група
---------------------------------------------------------------
sudo groupdel - изтрива група
---------------------------------------------------------------
groups bancho - показва в кои групи е добавен потребителя bancho
---------------------------------------------------------------
sudo adduser bancho  sudo - добавя потребител bancho в група sudo
	
	резултат:
	Adding user `bancho' to group `sudo' ...
	Adding user bancho to group sudo
	Done.
-----------------------------------------------------------------
sudo gpasswd -d bancho sudo - изтрива потребител bancho от група sudo

	резултат:	
	Removing user bancho from group sudo
	
=================================================================
10 ПРОЦЕСИ
=================================================================
xlogo & - извикване на процеса xlogo на заден план (background)
-----------------------------------------------------------------
ps - команда за показване на активните процеси
ps x - команда за по-подробноо описание на процесите
-----------------------------------------------------------------
top - динамично показване на процесите през 3 сек. излиза се с q
-----------------------------------------------------------------
kill - изпраща сигнал към процес

	примерен синтакс
	kill 	-HUP  	1235
		^-тип на сигнала

kill - l показва всички видове сигнали

man 7 signal - подробно описание на сигналите
-----------------------------------------------------------------
killall - затваря всички процеси с дадено име 
-----------------------------------------------------------------
pstree - показва процесите в дървовидна структора с връзките между тях

=================================================================
11 КОНФИГУРИРАНЕ НА СРЕДАТА
=================================================================

printenv - принтира много променливи определящи средата

	printenv USER - принтира само USER променлива
-----------------------------------------------------------------

set - принтира променливи от средата и bash програмите.
	по-подробно е от printenv
-----------------------------------------------------------------
Важни променливи ит средата:
	
	DISPLAY - името на твоя дисплей ако използяаш графична среда
	Обикновенно в ":0", това означава първи дисплей от X сървър;
	EDITOR - името на програата ползвана за редактиране на текст;
	SHELL - името на шел прграмата;
	HOME - Пътя до началната ти директория;
	LANG - Определя кой тип символи се ползват от средата;
	OLD_PWD - Предходната използвана директория. Не работи на Ubuntu;
	PATH - Път до програми и команди използвани от Linux;
	PWD - Съхранява текущата директория;
	TERM - Типа на терминала, който ползва системата;
	USER - Името на потребителя;
-----------------------------------------------------------------
Файл в който се съдържа настройките на средата за дадения потребител

	~/ .bashrc
	
# - ползва се за коментар

=================================================================
12 ВЪВЕДЕНИЕ ВЪВ vi
=================================================================

vi - текстови редактор в терминална среда

команди :

	i - инсерт добави текст
	esc - натиска се ескейп след редакция преди излизане
	:q - изход
	:q! - изход без запазване
	:w  - съхранение на файла
	
	dd - изтрива текущата линия
	x - изтрива текущия символ
	p - (paste) прилага
	yy - (yank) копира линия
	
	намиране на текс и заместване без да пита:
	
		:%s/Line/line/g - намира Line и го замества с line
		
	намиране на текс и заместване след питане:
	
		:%s/line/Line/gc - намира line и го замества с Line
	
	превключване между два файла 
	
	n: - отива към втория файл
	N: - връща се към първия файл

===============================================================
13 ПРЕОБРАЗЯВАНЕ НА КОНЗОЛАТА
===============================================================

echo $PS1 - извежда настройките на промпта, съдържащи се в PS1

PS1 се съдржа в .bashrc и може да се променя и там

Примерна настройка : PS1 = "[\u@\h \W]\$"

	ще изглежда така : [hp@ebook ~\Documents]$
---------------------------------------------------------------

Значение на някой т.нар. escape codes

\a звуков сигнал.
\h Име на компютъра hoast name.
\H Пълно име на компютъра.
\j брой на работите, които вървят в терминала.
\n нов ред.
\s името на шел програмата
\t текущо време.
\u потребителско име.
\v версията на пела.
\w името на текущата работна директория.
\! номер на текущата команда под, който се записва в историята на командите.
\# брой на командите, които са използвани в тази сесия.

\[ символ с който се обозначават такива символи, които не се изписват
\] съответно край на символите, които не се изписват
---------------------------------------------------------------

Цветово оформление на текста

Sequence	Text Color	Sequence	Text Color
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––
\033[0;30m 	Black		\033[1;30m 	Dark Gray
\033[0;31m 	Red		\033[1;31m 	Light Red
\033[0;32m 	Green 		\033[1;32m 	Light Green
\033[0;33m 	Brown 		\033[1;33m 	Yellow
\033[0;34m 	Blue 		\033[1;34m 	Light Blue
\033[0;35m 	Purple 	\033[1;35m 	Light Purple

полезна връзка за баш командите
https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-Builtins
===============================================================
14 УПРАВЛЕНИЕ НА ПАКЕТИ
===============================================================
Описваме само командите за Debian
---------------------------------------------------------------
apt-cache search [search_string] - търсене на пакет
---------------------------------------------------------------
dpkg --list -списък с инсталираните пакети
---------------------------------------------------------------
dpkg --status [package_name] - статус на инсталиран пакет
---------------------------------------------------------------
sudo apt-get update - обновяване на пакетите 
---------------------------------------------------------------
apt-get install [package_name] - инсталиране на пакети през интернет
---------------------------------------------------------------
dpkg --install [package_file] - инсталиране на пакет от файл на pc
---------------------------------------------------------------
apt-cache show [package_name] - показване на информация за инсталираните пакети
---------------------------------------------------------------
dpkg --search [file_name] - изписва файловете свързани с пакета

===============================================================
15 УПРАВЛЕНИЕ НА НОСИТЕЛИ НА ИНФОРМАЦИЯ
===============================================================

/dev - директория в която всички устроиства съществуват
---------------------------------------------------------------
mount - изписва поставената медия към компютъра
---------------------------------------------------------------
sudo umount -fl /dev/sdb1 - премахва устройство /dev/sdb1
трябва да сме много сигурни с името на устройството!!!
---------------------------------------------------------------
df - показва списък на файловата система
----------------------------------------------------------------
lsblk - дървовиден списък на дисковите устроиства
---------------------------------------------------------------
sudo fdisk -l - списък с дисковите устроиства
sudo fdisk /dev/sdb - форматиране и други екстри
виж fdisk --help
---------------------------------------------------------------
sudo cfdisk /dev/sdb1 - прогрма подобна на fdisk
---------------------------------------------------------------
sudo mkfs.vfat /dev/sdb1 - форматира дисковото устроиство във
			формат FAT32
---------------------------------------------------------------
sudo apt-get install gparted - програма в графична среда за 
			управление на устроиства
---------------------------------------------------------------
dd - копира цялото съдържание от един диск на друг диск

sudo dd if=/dev/sdb1 of=flash_drive.img
	създава образ на усб флаш поставя образ във /home/user_name
---------------------------------------------------------------
wodim dev=/dev/cdrw image.iso - запис на образ върху компакт диск
---------------------------------------------------------------

===============================================================
16 УПРАВЛЕНИЕ НА МРЕЖИ
===============================================================

ping - изпраща тестови пакети от данни (icmp) към дестинация 
	връща времето за отговор и ttl параметър
---------------------------------------------------------------
traceroute - показва пътя на пакетите до дестинацията.
---------------------------------------------------------------
netstat - изпълнява различни функции

netstat -ie - показва комуникационните контролери на компютъра
		+ статистика за данни и др.
---------------------------------------------------------------

https://tldp.org/LDP/nag2/index.html
Важен линк за линукс и мрежите книга

===============================================================
17 ТЪРСЕНЕ НА ФАЙЛОВЕ
===============================================================

locate - 	бързо локализиране на файлове и директории
		съвпадащи с входния стринг
---------------------------------------------------------------

find - сложна команда за намиране на файлове с много опции

 find ~ -type d -търси всички поддиректории на домапната папка
 find ~ -type d | wc -l -преброява ги 
 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 	-type b - блокови специални файлове
 	-type c - символни специални файлове
 	-type d - директории
 	-type f - обикновенни файлове
 	-type l - връзки 
 	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

find ~ -type f -name "*.jpg" -size +1k | wc -l -преброява всички 
файлове с jpg разширение по-големи от 1к байта.

	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-name "*.jpg" - селектира всички файлове с разш. jpg
	-name "F*.jpg" - селектира всич. файлове с разш. jpg и
			започващи с буквата F
	-name "???.jpg"-селектира всички файлове с разш. jpg и 
			с име от три букви.
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
	-size b - 512 байта блок (това е по подразбиране)
	-size c - байта
	-size w - два байта дума
	-size k - килобайта 1024 байта
	-size M - мегабайта 1048576 байта
	-size G - гигабайта 1073741824 байта
	
	когато е с + е по-големи от посочената стойност
	когато е с - е по-малки от посочената стойност 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
find ~ '(' -name "???.txt" ')' -or '(' -name "??.txt" ')'
find ~ \( -name "???.txt" \) -or \( -name "??.txt" \)

търси файлови с логически условия -or -and -not тестовете могат да
бъдат групирани чрез скоби, като скобите се поставят в кавички или \( \)

	ОПИСАНИЕ НА НЯКОИ ДРУГИ ОПЦИИ НА КОМАНДА find
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-cmin n - намира файлове, чиито атрибути или 
		съдържание са  модифицирани точно преди 
		n минути ако се използват - и + се търсят файлове 
		съответно създадени преди n минути и след n минути
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-cnewer name - намира файлове чиито атрибути или съдържание са
			 променяни  по-рано от файла name
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-ctime n - намира файлове или директории, чиито атрибути или 
		съдържание са модифицирани преди n*24 съответно и тук се
		използват символите - и + за по-млко и повече от този период
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-empty - намира файлове и директории, който са празни
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-iname - същото като -name само, че не се интересува от 
		малки и големи букви не е "case sensitive"
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-inum - търсене на файл по Inode номер
		чрез команда stat се виждат мета данни за файла 
		включително и Inode номера  
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-mmin n амира файлове, чиито съдържание са  модифицирани 
		точно преди n минути ако се използват - и + се търсят 
		файлове съответно създадени преди n минути и след 
		n минути
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-mtime -намира файлове или директории, чиито 
		съдържание са модифицирани преди n*24 съответно и тук се
		използват символите - и + за по-млко и повече от този период
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-name - стринг с име "*.jpg"
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-newer - намира файлове и директори, чието съдържание
	е променяно по-рано от файла споменат след -newer
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-nouser - намира файлове и директории, които не принадлежат
	на валиден потребител
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-user - намира файлове и директории принадлежащи на 
		съответния потребител
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-perm mode - намира файлове с определени права 

	ОПИСАНИЕ НА ДЕЙСТВИЯ С find
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	-delete - изтрива намерените файлове и директории
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-ls - изпълнява команда ls -dils със съвпадналите файлове
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-print - изписва намерените файлове в стандартния изход
		това действие се изпълнява по подразбиране, ако
		не е посочено друго
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-quit - спира изпълнението при първо съвпадение
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-exec - посзволява изпълнението на команди от баштерминала
	примери:
	
	find ~ -type f -name 'foo*' -exec ls -l '{}' ';'
	това е равносилно на:
	find ~ -type f -name 'foo*' -ls
	
	find ~ -type f -name 'foo*' -exec ls -l '{}' +
	този пример е идентичен с горния, само че команда ls не се
	изпълнява за всеки файл по отделно а след намирането на 
	всичките файлове се изпълнява веднъж за всички съвпадения
	
	find ~ -type f -name 'foo*' -print | xargs ls -l
	този пример е идентичен с горния чрез пайпинг и xargs
	
	
	find . -not -path '*/\.*' 
	не показва скритите папки и директории

===============================================================
18 АРХИВИРАНЕ И БЕКЪП
===============================================================
gzip -  команда за компресиране на файлове

	gzip file.txt - командата компресира файла
	gunzip file.txt.gz - командата декомпресира файла
	gzip -d file.txt.gz - същото като горната
	gzip -tv file.txt.gz - тества съвместимоста на компреса 
	всичкии опции с gzip --help
---------------------------------------------------------------
bzip2 - подобна програма на gzip, но ползва друг  алгоритъм
	bzip2 file.txt - компресира file.txt
	bunzip2 file.txt.bz2 - декомпресира file.txt.bz2
---------------------------------------------------------------
tar - архивира файлове и директории в ерархичния им ред

	tar cf floder_arh.tar /floder - архивира съдържанието на floder
	в файл с архив floder_arh.tar
	
	tar tf floder_arh.tar - показва съдържанието на архива floder_arh.tar
	
	tar xf floder_arh.tar - разархивира floder_arh.tar
---------------------------------------------------------------
zip - архивира само отделен файл или цели папки с файлове, както tar

	zip -r floder_arh.zip /floder  -  с опция -r архивира цялото 
	съдържание на папка /floder.
	
	zip file.zip /floder/file.txt - архивира само file.txt 

	unzip -l floder_arh.zip - разархивира архива floder_arh.zip
	опцията -l изписва всички файлове и директории съдържащи се 
	в архива, без да се разархивират
---------------------------------------------------------------
rsync - синхронизира директории, копира бързо съдържание от една директория 
	в друга. Подходяща за резервно копие (бекъп).
	
	rsync -av /source_floder /dest_floder - копира съдържанието на 
	/source_floder в /dest_floder и то само на променяните файлове ;)
	
	rsync -av --delete /source_floder /dest_floder - тук прави същото 
	но ако има премахнати файлове в директорията източник ги трие и в 
	директорията дестинация.
	
===============================================================
19 РЕДОВНО ПОЛЗВАН ТЕКСТ REGULAR EXPRESSIONS
===============================================================
grep и неговите опции

	-i - игнорира малки или големи нукви
	-------------------------------------------------
	-v - инвертира съвпаденията показва там където няма
	такива
	-------------------------------------------------
	-c - изписва броя на съвпаденията
	-------------------------------------------------
	-l - изписва файловете, в които има съвпадения
	
		grep -l stoian *.txt
	-------------------------------------------------
	-L - изписва файловете, в които няма съвпадения
	-------------------------------------------------
	-n - изписва номера на реда и името на файла в който се
	намира съвпадението
	-------------------------------------------------
	-h - не изписва файла и номера на реда където се намира съвпадението
	-------------------------------------------------
	
	Пример:
	grep -n my_word *.txt - търси думата my_word във всички файлове 
	с разширение txt на текущата директория изписва файла и линията,
	в които е срещната думата.
	
Използаване на специални знаци за откриване на текст във файл
така наречени мета символи.

^ $ . [ ] { } - ? * + ( ) | \

	-------------------------------------------------
	. замества всяка буква 
	
	grep -n '.my' *.txt - търси дума на която първата буква може да е
	кои да е символ а другите две my
	-------------------------------------------------
	^ търси символите в началото на реда
	
	grep -n '^my' *.txt - търси всички редове, които започват с my в
	файлове 
	-------------------------------------------------
	$ търси символите в края на реда
	
	grep -n 'my$' *.txt - търси всички редове, които завършват с my в
	файлове 
	-------------------------------------------------
	[] скоби поставят възможни символи в търсенето
	
	grep 'te[xn]' com*.txt - ще намери текст който съдържа tex или ten
	
	поставени в квадратни скоби мета символите ^ и - имат различно значение
	примерно:
	
	grep 'te[^xn]' com*.txt - ще направи, така че да се намерят думи, които
	не съдържат x и n.
	
	grep 'te[a-s]' com*.txt - ще направи, така че да намери низове от 
	текст където да започват със символите te и да завършват с множество 
	от символите между a и s. 
	
	множествата от символи са подредени по следния начин:
	ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
	
	Символни класове:
	------------------------------------------------------
	[:alnum:] Съдържа големи и малки букви плюс числата оъ 0 до 9:
			[A-Za-z0-9]
	[:word:] Съшото като [:alnum:], но в класа влиза и долно тире
			(_) character.
	[:alpha:] Съдържа само малки и големи букви:
			[A-Za-z]
	[:blank:] Съдържа интервал и Tab.
	
	[:cntrl:] Съдържа ASCII контролни кодове от 0 до 31 и 127.
			
	[:digit:] Съдържа числата от 1 до 9.
	
	[:graph:] Съдържа видимите ASCII символи от 33 до 126.
	[:lower:] The lowercase letters.
	
	[:punct:] Съдържа пунктуационни знаци.
	[-!"#$%&'()*+,./:;<=>?@[\\\]_`{|}~]
			
	[:print:] Съдържа класа [:graph:] плюс символа за разстояние.
			
	[:space:] Съдържа ASCII символите: space, tab, carriage
		return, newline, vertical tab, and form feed.
		[ \t\r\n\v\f]
	[:upper:] Съдържа главни букви.
	
	[:xdigit:] Съдържа символи за изписване на шеснайстетични числа
				:[0-9A-Fa-f]
	--------------------------------------------------------
	
	До тук бяха разгледани действието на основните мета символи:
	^ $ . [] *
	
	Сега ще разгледаме примери с разширени мета символи
	() {} ? + | 
	--------------------------------------------------------
	| алтернативно търсене или
	
	grep -E 'aaa|bbb' - ще принтира редове, в които се съдържа символни
				низове ааа или bbb
	--------------------------------------------------------
	? - символ, който нe съвпада или съвпада само един път
	
	grep -E '\(?Name\)?' - Ще намери низове съдържащи Name и (Name)
	--------------------------------------------------------
	* - символ, който не съвпада или съвпада много пъти
	
	grep -E '[[:alnum:]] *\.' file.txt - ако линията не завършва с точка няма
						да бъде намерена 
	--------------------------------------------------------
	+ - символ, който съвпада веднъж или много пъти
	
	echo "allle" | grep -E 'al+e' - в този случай ще намери allle
	echo "abbbe" | grep -E 'al+e' - в този случай няма да намери allle
	--------------------------------------------------------
	{} - фигурни скоби, които показват колко пъти точно се явява символа 
	
	grep -E '^[0-9]{3}' password.txt - намира всички трицифрени числа
	
	grep -E '^[0-9]{3,5}' password.txt - намира всички числа съдържащи между
						3 и 5 цифри
	grep -E '^[0-9]{3,}' password.txt - намира всички  числа с три или повече 
						цифри
	grep -E '^[0-9]{,3}' password.txt - намира всички числа с три или по-малко
						 цифири
	--------------------------------------------------------
 
	-F фиксирани стрингове тази опция е хубаво да се използва, когато
		в низа, който търсим има метасимволи, тогава метасимволите
		се третират, като обиновени символи
	--------------------------------------------------------
	
	командите find i locate използават regular expresion чрез следната опция
	find -regex
	locate -regex

===============================================================
20 ФОРМАТИРАНЕ НА ТЕКСТ
===============================================================
	cat - някой нови разширения на стария приятел cat
	
	cat -A my.txt
	показва символи на местото на табовете ^  и $ на символ за нова линия
	
	cat -ns my.txt
	показва номерация на редовете
	---------------------------------------------------------
	sort - още примери със sort много интересни и полезни
	опции:
		 -b - тази опция е по подразбиране, тя сортира от първия
		 символ на реда със следващия ред, ако на реда има табове или
		 интервали ги пропуска
		 
		 -f - игнорира малки и големи букви.
		 
		 -n - сортира само по номера съдържащи се в текста
		 
		 -r - инвертира листа на сортирането
		 
		 -k - сортира по полета. (под полета се разбира символи разделени 
		 с таб или интервал)
		 
		 -m - обединява няколко файла, които се сортират в един
		 
		 -o - изпраща сортирания списък във файл а не към стандартния изход
		 
		 -t - дефинира символ за разделяне на полетата
		 
	пример за сортиране по полета:
	
	ls -l | sort -n -k 5 -с този пример позволяваме да сортираме листа в 
	директорията по големина на файловете. в петото поле се съдържа
	големината на файла 
	
	ls -l | sort -k7nb  -k8.1nb -k8.3nb my.txt - с този пример е показано
	сортиране по ден от месеца и час. Особеността тук е че e необходимо
	ползването на -b опция при всяко поле за да премахне сортирането на първото
	поле.
 
	---------------------------------------------------------
	uniq - намира повтарящи се редове ето и опциите:
	
		-c - преброява колко пъти се повтаря линията. действа само ако
		 записите, които се повтарят са един след друг. Тоест желателно е 
		 да се ползва със sort примера по-долу
		 
		  sort my.txt | uniq
		  
		-d - показва само повтарящите се редове. важи горното условие за 
		комбинацията със sort
		
		-f n - показва повтарящите се записи във n-тото поле. Както в 
		по-горните случаии и тук е необходимо да се направи сортировак,
		само че сортирането трябва да е по второто поле.
		Ето един нагледен пример:
		
		sort -k2 my.txt | uniq -c -f 1
		
		Естествено файла my.text трябва да съдържа по две полета, които да
		са разделени с таб или интервал. За съжаление немогат да се използват
		други знаци за разделение на полетата
		
		-i - игнорира малки и големи букви
		
		-s n - пропуска n брои символи от началото на записа
		
		-u - показва само уникалните редове.
	---------------------------------------------------------
	cut - изрязва текст от стандартен изход
	
		-c - изрязва определен брои значи от всеки ред зададени чрез запетаи
		и тирета
		
			cut -c 1-5,7-10 mysort.txt 
			изрязва от 1 до 5 символ плюс 7 до 10 символ
			
		-f - изрязва полета разделени с интервал или таб. може и чрез
		специално изразени символи, който се задава с долната опция.
		
		-d - опция ползваща разделяне на полето със специално обозначен 
		символ
		
		--compliment - показва останалата част от файла, с изключение на
		селектираното от  опциите -c и -f
	----------------------------------------------------------
	paste - поставяне на текст от един файл в друг
	
		поставя поле по поле
	----------------------------------------------------------
	join - раоти, като paste, но за да комбинира полета е необходимо първото 
	поле на файловете да бъде общо. Примерно:
	
	file1.txt 
	1	Pesho
	2	Misho
	3	Gosho
	
	file2.txt
	1	23
	2	27
	3	31
	
	Общото поле тук е номерацията на записите 1,2,3
	!Командата иползва само интервал за да разделя полетата
	----------------------------------------------------------
	comm - сравнява текстовете на файловете
	
	Извежда резултатите в три колкони в първата колона показва уникалните записи в 
	първия файл, втората колкона показва уникални записи във втория файл, в третата
	колкона излизат общи записи и за двата файла.
	Чрез опциите -1, -2, -3 можем да подтиснем съответната колона
	----------------------------------------------------------
	diff - много полезна програма за сравняване на разлики в файл, съдържащ
	код
	
	
	diff  -y --color name1.txt name2.txt - принтира файла в две колони и оцветява
	изтритите редове и новите в два различни цвята в основния цвят остават 
	непроменените редове
	
	--suppress-common-lines - опцията потиска общите редове
	
	интересни са също опциите -c, -u
	
	в различните опции се означава по различен начин добавените, изтрити и променени
	редове
	
	добавен:	+	>	а
	изтрит		-	<	d
	променен	!	|	c
	----------------------------------------------------------
	patch - команда за добавяне на разликите 
	
	необходимо е първо да запишем разликите в отделен файл чрез следната команда
	diff -Naur file1.txt file2.txt > patchfile.txt
	
	след което въвеждаме следната команда
	patch < patchfile.txt
	----------------------------------------------------------
	tr - команда за подмяна на символи в низ или текст
	
	echo "stoin banchev" | tr a-z A-Z - подменя малките букви с големи

	echo "lowercase letters" | tr [:lower:] A - подменя всички символи с 'А'
	
	cat main.c  | tr -d '\t' | tr -s '\n''\n' - начин да се премахнат празни
	редове и таб в файл с код ;)
	
	-s - squiz изтисква премахва повтарящи се символи
	-d - изтрива символи.
	-----------------------------------------------------------
	sed - команда за текущо редактиране на текст
	
	пример1
	cat name1.txt | sed 's/Hello/Bye/' - подменя думата Hello  с думата Bye
	
	след командата с буквата s следва делителя на думите и низове, които искаме
	да бъдат подменени с в текста в настоящия пример е е използвана / , но можем 
	да използваме всеки друг символ пример две ще извърши същото нещо въпреки, че е 
	използван следния символ - за разделение
	
	пример2
	cat name1.txt | sed 's-Hello-Bye-' - подменя думата Hello  с думата Bye
	
	пример3 
	cat name1.txt | sed '1s/Hello/Bye/' - подменя думата Hello  с думата Bye
	само в първия ред на файла
	
	Ето и начините чрез, които се задава на кои редове да въздейства командата
	
	n - конкретен номер ред, където n положително цяло число
	
	$ - последния ред 
	
	/text/ - всички редове, на които има text 
	
	adr1, adr2 - от ред с адрес adr1 до ред с адрес adr2
	
	first~step - първи адрес и стъпка примерно всички нечетни редове ще изглежда
	по следния начин 1~2
	
	adr1, +n - от ред с адрес adr1 и следващите n реда
	
	adr! - всички редове без adr
	
	пример4
	sed -n '/;/,+2p' name1.txt - отпечатва всички редове, които съдържат ; и 
	следващите два реда след тях
	
	В разгледаните примери до тук показахме само командите s и p в следващите редове 
	ще опишем други команди.
	
	= - показва на кой редове се намира съвпадението 
	а - добавя текст след реда на който се намира съвпадението 
	d - изтрива текущата линия 
	i - добавя текст преди реда, който съвпада на търсенето
	p - отпечатва всяка линия, която съвпада с търсенето 
	s/expr/replacment/ - променя текста на expr със replacment.
	
	http://www.gnu.org/software/sed/manual/sed.html
	
	-----------------------------------------------------------
	aspell - команда за граматични проверки на текст
	
	aspell check file.txt - примерно използване на командата
	-----------------------------------------------------------
	
===============================================================
21 ФОРМАТИРАНЕ НА ИЗХОДЕН ТЕКСТ
===============================================================
	
	nl - номериране на текст.
	
	nl program.c - номерира само редовете със съдържание на текст не и 
	празните редове.
	
	Изходния текс във файла може да се раздели на хедър боди и футър чрез следните
	маркиращи символи:
	
	\:\:\: - header заглавие
	\:\: - body тяло
	\: - footer дъно
	
	nl -b a program.c - номерира всички редове на тялото body
	nl -h а program.c - номерира всички заглавия 
	nl -f a program.c - номерира всички дъна
	-----------------------------------------------------------
	fold - сбива текста в колкона 
	
	fold -w 30 program.c - сбива текста в колона от 30 символа и прекъсва
	думите по средата
	
	fold -w 30 -s program.c - сбива текста в колона от 30 символа и прекъсва текста
	в местата с интервали.
	-----------------------------------------------------------
	fmt - команда подобна на fold 
	-----------------------------------------------------------
	pr - форматира файл за принтиране
	-----------------------------------------------------------
	printf - имплементация на с функцията в bash 
	-----------------------------------------------------------
	groff - команда за превръщане на специфично форматиран текстови файл в 
	предпечатна страница 
	
	Относно начина за форматиране на документа виж: 
	https://docs.freebsd.org/44doc/usd/19.memacros/paper.pdf
	
	Всеки man файл е форматиран така, виж man за командата ls тук:
	zcat /usr/share/man/man1/ls.1.gz 
	
	Чрез следната команда се реализира отпечатването на файла в PostScript формат
	zcat /usr/share/man/man1/ls.1.gz | groff -mandoc > ~/Desktop/foo.ps

	Чрез следната команда се конвертира в pdf (Portble Document Format)
	ps2pdf ~/Desktop/foo.ps ~/Desktop/ls.pdf
	
	
===============================================================
22 ПРИНТИРАНЕ
===============================================================
	
	Пропускам тази глава, тъй като смятам че за сега не ми е нужна
	
===============================================================
23 КОМПИЛИРАНЕ НА ПРОГРАМИ
===============================================================
	
	gcc - компилатор за C , не е инсталиран необходима е инсталация
	g++ - компилатор за C++, не е инсталиран необходима е инсталация
	make - команда за стартиране на makefile,  не е инсталирана необходима е
	инсталация
	
	
		
	
exit - излиза от терминала :)




